module HaikuCheck
    module SyllableEstimator
      SUB_SYLLABLES = [
        "cial",
        "tia",
        "cius",
        "cious",
        "uiet",
        "gious",
        "geous",
        "priest",
        "giu",
        "dge",
        "ion",
        "iou",
        "sia$",
        ".che$",
        ".ched$",
        ".abe$",
        ".ace$",
        ".ade$",
        ".age$",
        ".aged$",
        ".ake$",
        ".ale$",
        ".aled$",
        ".ales$",
        ".ane$",
        ".ame$",
        ".ape$",
        ".are$",
        ".ase$",
        ".ashed$",
        ".asque$",
        ".ate$",
        ".ave$",
        ".azed$",
        ".awe$",
        ".aze$",
        ".aped$",
        ".athe$",
        ".athes$",
        ".ece$",
        ".ese$",
        ".esque$",
        ".esques$",
        ".eze$",
        ".gue$",
        ".ibe$",
        ".ice$",
        ".ide$",
        ".ife$",
        ".ike$",
        ".ile$",
        ".ime$",
        ".ine$",
        ".ipe$",
        ".iped$",
        ".ire$",
        ".ise$",
        ".ished$",
        ".ite$",
        ".ive$",
        ".ize$",
        ".obe$",
        ".ode$",
        ".oke$",
        ".ole$",
        ".ome$",
        ".one$",
        ".ope$",
        ".oque$",
        ".ore$",
        ".ose$",
        ".osque$",
        ".osques$",
        ".ote$",
        ".ove$",
        ".pped$",
        ".sse$",
        ".ssed$",
        ".ste$",
        ".ube$",
        ".uce$",
        ".ude$",
        ".uge$",
        ".uke$",
        ".ule$",
        ".ules$",
        ".uled$",
        ".ume$",
        ".une$",
        ".upe$",
        ".ure$",
        ".use$",
        ".ushed$",
        ".ute$",
        ".ved$",
        ".we$",
        ".wes$",
        ".wed$",
        ".yse$",
        ".yze$",
        ".rse$",
        ".red$",
        ".rce$",
        ".rde$",
        ".ily$",
        ".ely$",
        ".des$",
        ".gged$",
        ".kes$",
        ".ced$",
        ".ked$",
        ".med$",
        ".mes$",
        ".ned$",
        ".[sz]ed$",
        ".nce$",
        ".rles$",
        ".nes$",
        ".pes$",
        ".tes$",
        ".res$",
        ".ves$",
        "ere$"
      ].map { |pattern| Regexp.new(pattern) }

      ADD_SYLLABLES = [
        "ia",
        "riet",
        "dien",
        "ien",
        "iet",
        "iu",
        "iest",
        "io",
        "ii",
        "ily",
        ".oala$",
        ".iara$",
        ".ying$",
        ".earest",
        ".arer",
        ".aress",
        ".eate$",
        ".eation$",
        "[aeiouym]bl$",
        "[aeiou]{3}",
        "^mc",
        "ism",
        "^mc",
        "asm",
        "([^aeiouy])1l$",
        "[^l]lien",
        "^coa[dglx].",
        "[^gq]ua[^auieo]",
        "dnt$"
      ].map { |pattern| Regexp.new(pattern) }

      def self.estimate(word)
        return 0 if word.nil? || word.empty?

        word = word.downcase
        parts = word.split(/[^aeiouy]+/).reject(&:empty?)
        syllables = parts.length

        SUB_SYLLABLES.each do |pattern|
          syllables -= 1 if pattern.match?(word)
        end

        ADD_SYLLABLES.each do |pattern|
          syllables += 1 if pattern.match?(word)
        end

        syllables = 1 if syllables <= 0
        syllables
      end
    end
end